<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="229.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="229.00"> </text><svg id="frames" x="10" width="1180" total_samples="549926"><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::line_type::LineType&gt;::get_end_klu (249 samples, 0.05%)</title><rect x="0.0376%" y="101" width="0.0453%" height="15" fill="rgb(227,0,7)" fg:x="207" fg:w="249"/><text x="0.2876%" y="111.50"></text></g><g><title>cli`DYLD-STUB$$free (1,790 samples, 0.33%)</title><rect x="0.0838%" y="101" width="0.3255%" height="15" fill="rgb(217,0,24)" fg:x="461" fg:w="1790"/><text x="0.3338%" y="111.50"></text></g><g><title>cli`DYLD-STUB$$malloc (1,749 samples, 0.32%)</title><rect x="0.4093%" y="101" width="0.3180%" height="15" fill="rgb(221,193,54)" fg:x="2251" fg:w="1749"/><text x="0.6593%" y="111.50"></text></g><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::line_type::LineType&gt;::get_end_klu (4,009 samples, 0.73%)</title><rect x="33.4314%" y="85" width="0.7290%" height="15" fill="rgb(248,212,6)" fg:x="183848" fg:w="4009"/><text x="33.6814%" y="95.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (1,312 samples, 0.24%)</title><rect x="33.9218%" y="69" width="0.2386%" height="15" fill="rgb(208,68,35)" fg:x="186545" fg:w="1312"/><text x="34.1718%" y="79.50"></text></g><g><title>cli`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (126 samples, 0.02%)</title><rect x="34.1604%" y="85" width="0.0229%" height="15" fill="rgb(232,128,0)" fg:x="187857" fg:w="126"/><text x="34.4104%" y="95.50"></text></g><g><title>cli`core::hash::BuildHasher::hash_one (355 samples, 0.06%)</title><rect x="34.1875%" y="85" width="0.0646%" height="15" fill="rgb(207,160,47)" fg:x="188006" fg:w="355"/><text x="34.4375%" y="95.50"></text></g><g><title>cli`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;isize,alloc::rc::Rc&lt;core::cell::RefCell&lt;czsc::bsp::CBspPoint&lt;czsc::cbi::CBi&gt;&gt;&gt;&gt;&gt; (4,104 samples, 0.75%)</title><rect x="34.2641%" y="85" width="0.7463%" height="15" fill="rgb(228,23,34)" fg:x="188427" fg:w="4104"/><text x="34.5141%" y="95.50"></text></g><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::line_type::LineType&gt;::get_end_klu (8,077 samples, 1.47%)</title><rect x="39.2576%" y="69" width="1.4687%" height="15" fill="rgb(218,30,26)" fg:x="215888" fg:w="8077"/><text x="39.5076%" y="79.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (2,639 samples, 0.48%)</title><rect x="40.2465%" y="53" width="0.4799%" height="15" fill="rgb(220,122,19)" fg:x="221326" fg:w="2639"/><text x="40.4965%" y="63.50"></text></g><g><title>cli`core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;czsc::bsp::CBspPoint&lt;czsc::cseg::CSeg&lt;czsc::cbi::CBi&gt;&gt;&gt;&gt; (121 samples, 0.02%)</title><rect x="40.7297%" y="69" width="0.0220%" height="15" fill="rgb(250,228,42)" fg:x="223983" fg:w="121"/><text x="40.9797%" y="79.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (15,249 samples, 2.77%)</title><rect x="40.7517%" y="69" width="2.7729%" height="15" fill="rgb(240,193,28)" fg:x="224104" fg:w="15249"/><text x="41.0017%" y="79.50">cl..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (79 samples, 0.01%)</title><rect x="43.5351%" y="69" width="0.0144%" height="15" fill="rgb(216,20,37)" fg:x="239411" fg:w="79"/><text x="43.7851%" y="79.50"></text></g><g><title>cli`czsc::bsp_list::CBSPointList&lt;T&gt;::add_bs (46,976 samples, 8.54%)</title><rect x="35.0103%" y="85" width="8.5422%" height="15" fill="rgb(206,188,39)" fg:x="192531" fg:w="46976"/><text x="35.2603%" y="95.50">cli`czsc::bs..</text></g><g><title>cli`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9,645 samples, 1.75%)</title><rect x="46.5428%" y="69" width="1.7539%" height="15" fill="rgb(217,207,13)" fg:x="255951" fg:w="9645"/><text x="46.7928%" y="79.50"></text></g><g><title>cli`core::hash::BuildHasher::hash_one (7,759 samples, 1.41%)</title><rect x="48.2972%" y="69" width="1.4109%" height="15" fill="rgb(231,73,38)" fg:x="265599" fg:w="7759"/><text x="48.5472%" y="79.50"></text></g><g><title>cli`czsc::bsp_list::CBSPointList&lt;T&gt;::bsp1_idx_dict (34,017 samples, 6.19%)</title><rect x="43.5526%" y="85" width="6.1857%" height="15" fill="rgb(225,20,46)" fg:x="239507" fg:w="34017"/><text x="43.8026%" y="95.50">cli`czsc..</text></g><g><title>libsystem_platform.dylib`_platform_memset (109 samples, 0.02%)</title><rect x="49.7185%" y="69" width="0.0198%" height="15" fill="rgb(210,31,41)" fg:x="273415" fg:w="109"/><text x="49.9685%" y="79.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (10,912 samples, 1.98%)</title><rect x="49.7414%" y="85" width="1.9843%" height="15" fill="rgb(221,200,47)" fg:x="273541" fg:w="10912"/><text x="49.9914%" y="95.50">c..</text></g><g><title>cli`czsc::ceigen::CEigen&lt;T&gt;::try_add (113 samples, 0.02%)</title><rect x="51.7681%" y="53" width="0.0205%" height="15" fill="rgb(226,26,5)" fg:x="284686" fg:w="113"/><text x="52.0181%" y="63.50"></text></g><g><title>cli`czsc::ceigen_fx::CEigenFx&lt;T&gt;::add (227 samples, 0.04%)</title><rect x="51.7486%" y="69" width="0.0413%" height="15" fill="rgb(249,33,26)" fg:x="284579" fg:w="227"/><text x="51.9986%" y="79.50"></text></g><g><title>cli`czsc::ceigen_fx::CEigenFx&lt;T&gt;::add (56 samples, 0.01%)</title><rect x="51.7935%" y="53" width="0.0102%" height="15" fill="rgb(235,183,28)" fg:x="284826" fg:w="56"/><text x="52.0435%" y="63.50"></text></g><g><title>cli`czsc::ceigen_fx::CEigenFx&lt;T&gt;::reset (157 samples, 0.03%)</title><rect x="51.7912%" y="69" width="0.0285%" height="15" fill="rgb(221,5,38)" fg:x="284813" fg:w="157"/><text x="52.0412%" y="79.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::cal_seg_sure (55 samples, 0.01%)</title><rect x="51.8246%" y="69" width="0.0100%" height="15" fill="rgb(247,18,42)" fg:x="284997" fg:w="55"/><text x="52.0746%" y="79.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::cal_seg_sure (567 samples, 0.10%)</title><rect x="51.7388%" y="85" width="0.1031%" height="15" fill="rgb(241,131,45)" fg:x="284525" fg:w="567"/><text x="51.9888%" y="95.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::add_new_seg (94 samples, 0.02%)</title><rect x="51.8528%" y="69" width="0.0171%" height="15" fill="rgb(249,31,29)" fg:x="285152" fg:w="94"/><text x="52.1028%" y="79.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::collect_left_seg (165 samples, 0.03%)</title><rect x="51.8490%" y="85" width="0.0300%" height="15" fill="rgb(225,111,53)" fg:x="285131" fg:w="165"/><text x="52.0990%" y="95.50"></text></g><g><title>cli`czsc::czs::CZs&lt;T&gt;::update_zs_end (66 samples, 0.01%)</title><rect x="51.9043%" y="69" width="0.0120%" height="15" fill="rgb(238,160,17)" fg:x="285435" fg:w="66"/><text x="52.1543%" y="79.50"></text></g><g><title>cli`czsc::czs_list::CZsList&lt;T&gt;::add_to_free_lst (225 samples, 0.04%)</title><rect x="51.8846%" y="85" width="0.0409%" height="15" fill="rgb(214,148,48)" fg:x="285327" fg:w="225"/><text x="52.1346%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1,316 samples, 0.24%)</title><rect x="51.9352%" y="85" width="0.2393%" height="15" fill="rgb(232,36,49)" fg:x="285605" fg:w="1316"/><text x="52.1852%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (482 samples, 0.09%)</title><rect x="52.1745%" y="85" width="0.0876%" height="15" fill="rgb(209,103,24)" fg:x="286921" fg:w="482"/><text x="52.4245%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (37,798 samples, 6.87%)</title><rect x="52.2703%" y="85" width="6.8733%" height="15" fill="rgb(229,88,8)" fg:x="287448" fg:w="37798"/><text x="52.5203%" y="95.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`_szone_free (2,755 samples, 0.50%)</title><rect x="59.1436%" y="85" width="0.5010%" height="15" fill="rgb(213,181,19)" fg:x="325246" fg:w="2755"/><text x="59.3936%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (102 samples, 0.02%)</title><rect x="59.7695%" y="69" width="0.0185%" height="15" fill="rgb(254,191,54)" fg:x="328688" fg:w="102"/><text x="60.0195%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (890 samples, 0.16%)</title><rect x="59.6469%" y="85" width="0.1618%" height="15" fill="rgb(241,83,37)" fg:x="328014" fg:w="890"/><text x="59.8969%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (86 samples, 0.02%)</title><rect x="59.7931%" y="69" width="0.0156%" height="15" fill="rgb(233,36,39)" fg:x="328818" fg:w="86"/><text x="60.0431%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1,794 samples, 0.33%)</title><rect x="61.1266%" y="69" width="0.3262%" height="15" fill="rgb(226,3,54)" fg:x="336151" fg:w="1794"/><text x="61.3766%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (203 samples, 0.04%)</title><rect x="61.4594%" y="69" width="0.0369%" height="15" fill="rgb(245,192,40)" fg:x="337981" fg:w="203"/><text x="61.7094%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (243 samples, 0.04%)</title><rect x="63.6058%" y="53" width="0.0442%" height="15" fill="rgb(238,167,29)" fg:x="349785" fg:w="243"/><text x="63.8558%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6,188 samples, 1.13%)</title><rect x="63.6500%" y="53" width="1.1252%" height="15" fill="rgb(232,182,51)" fg:x="350028" fg:w="6188"/><text x="63.9000%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (8,556 samples, 1.56%)</title><rect x="64.7753%" y="53" width="1.5558%" height="15" fill="rgb(231,60,39)" fg:x="356216" fg:w="8556"/><text x="65.0253%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (219 samples, 0.04%)</title><rect x="66.3311%" y="53" width="0.0398%" height="15" fill="rgb(208,69,12)" fg:x="364772" fg:w="219"/><text x="66.5811%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (955 samples, 0.17%)</title><rect x="66.3709%" y="53" width="0.1737%" height="15" fill="rgb(235,93,37)" fg:x="364991" fg:w="955"/><text x="66.6209%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (733 samples, 0.13%)</title><rect x="66.4113%" y="37" width="0.1333%" height="15" fill="rgb(213,116,39)" fg:x="365213" fg:w="733"/><text x="66.6613%" y="47.50"></text></g><g><title>libsystem_kernel.dylib`madvise (589 samples, 0.11%)</title><rect x="66.5542%" y="37" width="0.1071%" height="15" fill="rgb(222,207,29)" fg:x="365999" fg:w="589"/><text x="66.8042%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (646 samples, 0.12%)</title><rect x="66.5448%" y="53" width="0.1175%" height="15" fill="rgb(206,96,30)" fg:x="365947" fg:w="646"/><text x="66.7948%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (28,412 samples, 5.17%)</title><rect x="61.4963%" y="69" width="5.1665%" height="15" fill="rgb(218,138,4)" fg:x="338184" fg:w="28412"/><text x="61.7463%" y="79.50">libsys..</text></g><g><title>libsystem_malloc.dylib`free_tiny (37,723 samples, 6.86%)</title><rect x="59.8088%" y="85" width="6.8597%" height="15" fill="rgb(250,191,14)" fg:x="328904" fg:w="37723"/><text x="60.0588%" y="95.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (129 samples, 0.02%)</title><rect x="66.6686%" y="85" width="0.0235%" height="15" fill="rgb(239,60,40)" fg:x="366628" fg:w="129"/><text x="66.9186%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (720 samples, 0.13%)</title><rect x="66.6930%" y="53" width="0.1309%" height="15" fill="rgb(206,27,48)" fg:x="366762" fg:w="720"/><text x="66.9430%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (724 samples, 0.13%)</title><rect x="66.6928%" y="69" width="0.1317%" height="15" fill="rgb(225,35,8)" fg:x="366761" fg:w="724"/><text x="66.9428%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (729 samples, 0.13%)</title><rect x="66.6921%" y="85" width="0.1326%" height="15" fill="rgb(250,213,24)" fg:x="366757" fg:w="729"/><text x="66.9421%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (106 samples, 0.02%)</title><rect x="78.5566%" y="53" width="0.0193%" height="15" fill="rgb(247,123,22)" fg:x="432003" fg:w="106"/><text x="78.8066%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (14,549 samples, 2.65%)</title><rect x="78.4551%" y="69" width="2.6456%" height="15" fill="rgb(231,138,38)" fg:x="431445" fg:w="14549"/><text x="78.7051%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (13,885 samples, 2.52%)</title><rect x="78.5758%" y="53" width="2.5249%" height="15" fill="rgb(231,145,46)" fg:x="432109" fg:w="13885"/><text x="78.8258%" y="63.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (260 samples, 0.05%)</title><rect x="81.0535%" y="37" width="0.0473%" height="15" fill="rgb(251,118,11)" fg:x="445734" fg:w="260"/><text x="81.3035%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (78,568 samples, 14.29%)</title><rect x="66.8248%" y="85" width="14.2870%" height="15" fill="rgb(217,147,25)" fg:x="367487" fg:w="78568"/><text x="67.0748%" y="95.50">libsystem_malloc.dylib..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (61 samples, 0.01%)</title><rect x="81.1007%" y="69" width="0.0111%" height="15" fill="rgb(247,81,37)" fg:x="445994" fg:w="61"/><text x="81.3507%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2,081 samples, 0.38%)</title><rect x="81.4604%" y="69" width="0.3784%" height="15" fill="rgb(209,12,38)" fg:x="447972" fg:w="2081"/><text x="81.7104%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (61 samples, 0.01%)</title><rect x="81.8996%" y="37" width="0.0111%" height="15" fill="rgb(227,1,9)" fg:x="450387" fg:w="61"/><text x="82.1496%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (496 samples, 0.09%)</title><rect x="81.8412%" y="69" width="0.0902%" height="15" fill="rgb(248,47,43)" fg:x="450066" fg:w="496"/><text x="82.0912%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (275 samples, 0.05%)</title><rect x="81.8814%" y="53" width="0.0500%" height="15" fill="rgb(221,10,30)" fg:x="450287" fg:w="275"/><text x="82.1314%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (98 samples, 0.02%)</title><rect x="81.9136%" y="37" width="0.0178%" height="15" fill="rgb(210,229,1)" fg:x="450464" fg:w="98"/><text x="82.1636%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,342 samples, 0.24%)</title><rect x="81.9316%" y="69" width="0.2440%" height="15" fill="rgb(222,148,37)" fg:x="450563" fg:w="1342"/><text x="82.1816%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (818 samples, 0.15%)</title><rect x="82.7053%" y="53" width="0.1487%" height="15" fill="rgb(234,67,33)" fg:x="454818" fg:w="818"/><text x="82.9553%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6,166 samples, 1.12%)</title><rect x="82.8541%" y="53" width="1.1212%" height="15" fill="rgb(247,98,35)" fg:x="455636" fg:w="6166"/><text x="83.1041%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (102 samples, 0.02%)</title><rect x="83.9755%" y="53" width="0.0185%" height="15" fill="rgb(247,138,52)" fg:x="461803" fg:w="102"/><text x="84.2255%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (86 samples, 0.02%)</title><rect x="83.9955%" y="53" width="0.0156%" height="15" fill="rgb(213,79,30)" fg:x="461913" fg:w="86"/><text x="84.2455%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2,553 samples, 0.46%)</title><rect x="87.0013%" y="37" width="0.4642%" height="15" fill="rgb(246,177,23)" fg:x="478443" fg:w="2553"/><text x="87.2513%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (39,223 samples, 7.13%)</title><rect x="81.1156%" y="85" width="7.1324%" height="15" fill="rgb(230,62,27)" fg:x="446076" fg:w="39223"/><text x="81.3656%" y="95.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (33,394 samples, 6.07%)</title><rect x="82.1756%" y="69" width="6.0725%" height="15" fill="rgb(216,154,8)" fg:x="451905" fg:w="33394"/><text x="82.4256%" y="79.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23,300 samples, 4.24%)</title><rect x="84.0111%" y="53" width="4.2369%" height="15" fill="rgb(244,35,45)" fg:x="461999" fg:w="23300"/><text x="84.2611%" y="63.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4,303 samples, 0.78%)</title><rect x="87.4656%" y="37" width="0.7825%" height="15" fill="rgb(251,115,12)" fg:x="480996" fg:w="4303"/><text x="87.7156%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,443 samples, 0.26%)</title><rect x="88.2481%" y="85" width="0.2624%" height="15" fill="rgb(240,54,50)" fg:x="485299" fg:w="1443"/><text x="88.4981%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (872 samples, 0.16%)</title><rect x="88.5105%" y="85" width="0.1586%" height="15" fill="rgb(233,84,52)" fg:x="486742" fg:w="872"/><text x="88.7605%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,395 samples, 0.25%)</title><rect x="88.6690%" y="85" width="0.2537%" height="15" fill="rgb(207,117,47)" fg:x="487614" fg:w="1395"/><text x="88.9190%" y="95.50"></text></g><g><title>cli`czsc::analyzer::Analyzer::cal_seg_and_zs (501,863 samples, 91.26%)</title><rect x="0.7439%" y="101" width="91.2601%" height="15" fill="rgb(249,43,39)" fg:x="4091" fg:w="501863"/><text x="0.9939%" y="111.50">cli`czsc::analyzer::Analyzer::cal_seg_and_zs</text></g><g><title>libsystem_platform.dylib`_platform_memset (16,945 samples, 3.08%)</title><rect x="88.9227%" y="85" width="3.0813%" height="15" fill="rgb(209,38,44)" fg:x="489009" fg:w="16945"/><text x="89.1727%" y="95.50">lib..</text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (758 samples, 0.14%)</title><rect x="92.0075%" y="101" width="0.1378%" height="15" fill="rgb(236,212,23)" fg:x="505973" fg:w="758"/><text x="92.2575%" y="111.50"></text></g><g><title>cli`czsc::cbi_list::CBiList::try_add_virtual_bi (77 samples, 0.01%)</title><rect x="92.1493%" y="101" width="0.0140%" height="15" fill="rgb(242,79,21)" fg:x="506753" fg:w="77"/><text x="92.3993%" y="111.50"></text></g><g><title>cli`console::term::Term::flush (85 samples, 0.02%)</title><rect x="92.1799%" y="69" width="0.0155%" height="15" fill="rgb(211,96,35)" fg:x="506921" fg:w="85"/><text x="92.4299%" y="79.50"></text></g><g><title>cli`console::term::Term::write_through (85 samples, 0.02%)</title><rect x="92.1799%" y="53" width="0.0155%" height="15" fill="rgb(253,215,40)" fg:x="506921" fg:w="85"/><text x="92.4299%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (83 samples, 0.02%)</title><rect x="92.1802%" y="37" width="0.0151%" height="15" fill="rgb(211,81,21)" fg:x="506923" fg:w="83"/><text x="92.4302%" y="47.50"></text></g><g><title>cli`indicatif::draw_target::Drawable::draw (114 samples, 0.02%)</title><rect x="92.1786%" y="85" width="0.0207%" height="15" fill="rgb(208,190,38)" fg:x="506914" fg:w="114"/><text x="92.4286%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (333 samples, 0.06%)</title><rect x="92.2040%" y="53" width="0.0606%" height="15" fill="rgb(235,213,38)" fg:x="507054" fg:w="333"/><text x="92.4540%" y="63.50"></text></g><g><title>libsystem_c.dylib`isatty (335 samples, 0.06%)</title><rect x="92.2039%" y="69" width="0.0609%" height="15" fill="rgb(237,122,38)" fg:x="507053" fg:w="335"/><text x="92.4539%" y="79.50"></text></g><g><title>cli`indicatif::draw_target::ProgressDrawTarget::width (540 samples, 0.10%)</title><rect x="92.2019%" y="85" width="0.0982%" height="15" fill="rgb(244,218,35)" fg:x="507042" fg:w="540"/><text x="92.4519%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (194 samples, 0.04%)</title><rect x="92.2648%" y="69" width="0.0353%" height="15" fill="rgb(240,68,47)" fg:x="507388" fg:w="194"/><text x="92.5148%" y="79.50"></text></g><g><title>cli`indicatif::state::BarState::draw (722 samples, 0.13%)</title><rect x="92.1709%" y="101" width="0.1313%" height="15" fill="rgb(210,16,53)" fg:x="506872" fg:w="722"/><text x="92.4209%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (16,610 samples, 3.02%)</title><rect x="92.3141%" y="101" width="3.0204%" height="15" fill="rgb(235,124,12)" fg:x="507659" fg:w="16610"/><text x="92.5641%" y="111.50">lib..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12,536 samples, 2.28%)</title><rect x="95.3345%" y="101" width="2.2796%" height="15" fill="rgb(224,169,11)" fg:x="524269" fg:w="12536"/><text x="95.5845%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7,321 samples, 1.33%)</title><rect x="97.6140%" y="101" width="1.3313%" height="15" fill="rgb(250,166,2)" fg:x="536805" fg:w="7321"/><text x="97.8640%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2,001 samples, 0.36%)</title><rect x="98.9453%" y="101" width="0.3639%" height="15" fill="rgb(242,216,29)" fg:x="544126" fg:w="2001"/><text x="99.1953%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (709 samples, 0.13%)</title><rect x="99.3092%" y="101" width="0.1289%" height="15" fill="rgb(230,116,27)" fg:x="546127" fg:w="709"/><text x="99.5592%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (541 samples, 0.10%)</title><rect x="99.4432%" y="101" width="0.0984%" height="15" fill="rgb(228,99,48)" fg:x="546864" fg:w="541"/><text x="99.6932%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (211 samples, 0.04%)</title><rect x="99.5416%" y="101" width="0.0384%" height="15" fill="rgb(253,11,6)" fg:x="547405" fg:w="211"/><text x="99.7916%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1,043 samples, 0.19%)</title><rect x="99.5803%" y="101" width="0.1897%" height="15" fill="rgb(247,143,39)" fg:x="547618" fg:w="1043"/><text x="99.8303%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_try_free_default (546 samples, 0.10%)</title><rect x="99.7700%" y="101" width="0.0993%" height="15" fill="rgb(236,97,10)" fg:x="548661" fg:w="546"/><text x="100.0200%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (459 samples, 0.08%)</title><rect x="99.8693%" y="101" width="0.0835%" height="15" fill="rgb(233,208,19)" fg:x="549207" fg:w="459"/><text x="100.1193%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_try_free_default (179 samples, 0.03%)</title><rect x="99.9545%" y="101" width="0.0325%" height="15" fill="rgb(216,164,2)" fg:x="549676" fg:w="179"/><text x="100.2045%" y="111.50"></text></g><g><title>cli`cli::main::_{{closure}} (549,871 samples, 99.99%)</title><rect x="0.0007%" y="117" width="99.9900%" height="15" fill="rgb(220,129,5)" fg:x="4" fg:w="549871"/><text x="0.2507%" y="127.50">cli`cli::main::_{{closure}}</text></g><g><title>cli`main (549,923 samples, 100.00%)</title><rect x="0.0000%" y="165" width="99.9995%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="549923"/><text x="0.2500%" y="175.50">cli`main</text></g><g><title>cli`std::sys::backtrace::__rust_begin_short_backtrace (549,923 samples, 100.00%)</title><rect x="0.0000%" y="149" width="99.9995%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="549923"/><text x="0.2500%" y="159.50">cli`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>cli`cli::main (549,923 samples, 100.00%)</title><rect x="0.0000%" y="133" width="99.9995%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="549923"/><text x="0.2500%" y="143.50">cli`cli::main</text></g><g><title>dyld`start (549,924 samples, 100.00%)</title><rect x="0.0000%" y="181" width="99.9996%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="549924"/><text x="0.2500%" y="191.50">dyld`start</text></g><g><title>all (549,926 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="549926"/><text x="0.2500%" y="207.50"></text></g></svg></svg>