<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="378164"><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::line_type::LineType&gt;::get_end_klu (147 samples, 0.04%)</title><rect x="0.0434%" y="181" width="0.0389%" height="15" fill="rgb(227,0,7)" fg:x="164" fg:w="147"/><text x="0.2934%" y="191.50"></text></g><g><title>cli`_rjem_je_sdallocx_default (38 samples, 0.01%)</title><rect x="0.0915%" y="181" width="0.0100%" height="15" fill="rgb(217,0,24)" fg:x="346" fg:w="38"/><text x="0.3415%" y="191.50"></text></g><g><title>cli`_rjem_malloc (3,004 samples, 0.79%)</title><rect x="0.1015%" y="181" width="0.7944%" height="15" fill="rgb(221,193,54)" fg:x="384" fg:w="3004"/><text x="0.3515%" y="191.50"></text></g><g><title>cli`_rjem_sdallocx (4,628 samples, 1.22%)</title><rect x="0.8959%" y="181" width="1.2238%" height="15" fill="rgb(248,212,6)" fg:x="3388" fg:w="4628"/><text x="1.1459%" y="191.50"></text></g><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::common::IHighLow&gt;::high (38 samples, 0.01%)</title><rect x="53.1230%" y="165" width="0.0100%" height="15" fill="rgb(208,68,35)" fg:x="200892" fg:w="38"/><text x="53.3730%" y="175.50"></text></g><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::line_type::LineType&gt;::get_end_klu (3,300 samples, 0.87%)</title><rect x="53.1465%" y="165" width="0.8726%" height="15" fill="rgb(232,128,0)" fg:x="200981" fg:w="3300"/><text x="53.3965%" y="175.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (1,109 samples, 0.29%)</title><rect x="53.7259%" y="149" width="0.2933%" height="15" fill="rgb(207,160,47)" fg:x="203172" fg:w="1109"/><text x="53.9759%" y="159.50"></text></g><g><title>cli`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (49 samples, 0.01%)</title><rect x="54.0371%" y="149" width="0.0130%" height="15" fill="rgb(228,23,34)" fg:x="204349" fg:w="49"/><text x="54.2871%" y="159.50"></text></g><g><title>cli`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (120 samples, 0.03%)</title><rect x="54.0192%" y="165" width="0.0317%" height="15" fill="rgb(218,30,26)" fg:x="204281" fg:w="120"/><text x="54.2692%" y="175.50"></text></g><g><title>cli`DYLD-STUB$$pthread_getspecific (3,795 samples, 1.00%)</title><rect x="54.0509%" y="165" width="1.0035%" height="15" fill="rgb(220,122,19)" fg:x="204401" fg:w="3795"/><text x="54.3009%" y="175.50"></text></g><g><title>cli`_rjem_je_arena_cache_bin_fill_small (71 samples, 0.02%)</title><rect x="55.0962%" y="133" width="0.0188%" height="15" fill="rgb(250,228,42)" fg:x="208354" fg:w="71"/><text x="55.3462%" y="143.50"></text></g><g><title>cli`_rjem_je_tcache_alloc_small_hard (111 samples, 0.03%)</title><rect x="55.0883%" y="149" width="0.0294%" height="15" fill="rgb(240,193,28)" fg:x="208324" fg:w="111"/><text x="55.3383%" y="159.50"></text></g><g><title>cli`_rjem_je_tcache_bin_flush_small (151 samples, 0.04%)</title><rect x="55.2877%" y="117" width="0.0399%" height="15" fill="rgb(216,20,37)" fg:x="209078" fg:w="151"/><text x="55.5377%" y="127.50"></text></g><g><title>cli`_rjem_je_tcache_bin_flush_stashed (45 samples, 0.01%)</title><rect x="55.3276%" y="117" width="0.0119%" height="15" fill="rgb(206,188,39)" fg:x="209229" fg:w="45"/><text x="55.5776%" y="127.50"></text></g><g><title>cli`_rjem_je_te_event_trigger (847 samples, 0.22%)</title><rect x="55.1208%" y="149" width="0.2240%" height="15" fill="rgb(217,207,13)" fg:x="208447" fg:w="847"/><text x="55.3708%" y="159.50"></text></g><g><title>cli`tcache_event (326 samples, 0.09%)</title><rect x="55.2586%" y="133" width="0.0862%" height="15" fill="rgb(231,73,38)" fg:x="208968" fg:w="326"/><text x="55.5086%" y="143.50"></text></g><g><title>cli`_rjem_je_malloc_default (1,156 samples, 0.31%)</title><rect x="55.0547%" y="165" width="0.3057%" height="15" fill="rgb(225,20,46)" fg:x="208197" fg:w="1156"/><text x="55.3047%" y="175.50"></text></g><g><title>cli`tcache_event (55 samples, 0.01%)</title><rect x="55.3458%" y="149" width="0.0145%" height="15" fill="rgb(210,31,41)" fg:x="209298" fg:w="55"/><text x="55.5958%" y="159.50"></text></g><g><title>cli`_rjem_je_extent_record (50 samples, 0.01%)</title><rect x="55.4035%" y="117" width="0.0132%" height="15" fill="rgb(221,200,47)" fg:x="209516" fg:w="50"/><text x="55.6535%" y="127.50"></text></g><g><title>cli`_rjem_je_large_dalloc (57 samples, 0.02%)</title><rect x="55.4022%" y="149" width="0.0151%" height="15" fill="rgb(226,26,5)" fg:x="209511" fg:w="57"/><text x="55.6522%" y="159.50"></text></g><g><title>cli`pac_dalloc_impl (55 samples, 0.01%)</title><rect x="55.4027%" y="133" width="0.0145%" height="15" fill="rgb(249,33,26)" fg:x="209513" fg:w="55"/><text x="55.6527%" y="143.50"></text></g><g><title>cli`_rjem_je_tcache_bin_flush_small (200 samples, 0.05%)</title><rect x="55.6161%" y="117" width="0.0529%" height="15" fill="rgb(235,183,28)" fg:x="210320" fg:w="200"/><text x="55.8661%" y="127.50"></text></g><g><title>cli`tcache_bin_flush_edatas_lookup (56 samples, 0.01%)</title><rect x="55.6542%" y="101" width="0.0148%" height="15" fill="rgb(221,5,38)" fg:x="210464" fg:w="56"/><text x="55.9042%" y="111.50"></text></g><g><title>cli`_rjem_je_tcache_bin_flush_stashed (46 samples, 0.01%)</title><rect x="55.6690%" y="117" width="0.0122%" height="15" fill="rgb(247,18,42)" fg:x="210520" fg:w="46"/><text x="55.9190%" y="127.50"></text></g><g><title>cli`_rjem_je_te_event_trigger (1,029 samples, 0.27%)</title><rect x="55.4199%" y="149" width="0.2721%" height="15" fill="rgb(241,131,45)" fg:x="209578" fg:w="1029"/><text x="55.6699%" y="159.50"></text></g><g><title>cli`tcache_event (415 samples, 0.11%)</title><rect x="55.5822%" y="133" width="0.1097%" height="15" fill="rgb(249,31,29)" fg:x="210192" fg:w="415"/><text x="55.8322%" y="143.50"></text></g><g><title>cli`_rjem_je_sdallocx_default (1,299 samples, 0.34%)</title><rect x="55.3680%" y="165" width="0.3435%" height="15" fill="rgb(225,111,53)" fg:x="209382" fg:w="1299"/><text x="55.6180%" y="175.50"></text></g><g><title>cli`tcache_event (72 samples, 0.02%)</title><rect x="55.6925%" y="149" width="0.0190%" height="15" fill="rgb(238,160,17)" fg:x="210609" fg:w="72"/><text x="55.9425%" y="159.50"></text></g><g><title>cli`_rjem_malloc (27,764 samples, 7.34%)</title><rect x="55.7203%" y="165" width="7.3418%" height="15" fill="rgb(214,148,48)" fg:x="210714" fg:w="27764"/><text x="55.9703%" y="175.50">cli`_rjem_..</text></g><g><title>cli`_rjem_sdallocx (41,935 samples, 11.09%)</title><rect x="63.0621%" y="165" width="11.0891%" height="15" fill="rgb(232,36,49)" fg:x="238478" fg:w="41935"/><text x="63.3121%" y="175.50">cli`_rjem_sdallo..</text></g><g><title>cli`core::hash::BuildHasher::hash_one (339 samples, 0.09%)</title><rect x="74.1551%" y="165" width="0.0896%" height="15" fill="rgb(209,103,24)" fg:x="280428" fg:w="339"/><text x="74.4051%" y="175.50"></text></g><g><title>cli`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;isize,alloc::rc::Rc&lt;core::cell::RefCell&lt;czsc::bsp::CBspPoint&lt;czsc::cbi::CBi&gt;&gt;&gt;&gt;&gt; (4,122 samples, 1.09%)</title><rect x="74.2519%" y="165" width="1.0900%" height="15" fill="rgb(229,88,8)" fg:x="280794" fg:w="4122"/><text x="74.5019%" y="175.50"></text></g><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::line_type::LineType&gt;::get_end_klu (7,426 samples, 1.96%)</title><rect x="81.0156%" y="149" width="1.9637%" height="15" fill="rgb(213,181,19)" fg:x="306372" fg:w="7426"/><text x="81.2656%" y="159.50">c..</text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (2,432 samples, 0.64%)</title><rect x="82.3362%" y="133" width="0.6431%" height="15" fill="rgb(254,191,54)" fg:x="311366" fg:w="2432"/><text x="82.5862%" y="143.50"></text></g><g><title>cli`_rjem_je_arena_cache_bin_fill_small (44 samples, 0.01%)</title><rect x="82.9833%" y="117" width="0.0116%" height="15" fill="rgb(241,83,37)" fg:x="313813" fg:w="44"/><text x="83.2333%" y="127.50"></text></g><g><title>cli`_rjem_je_tcache_alloc_small_hard (51 samples, 0.01%)</title><rect x="82.9825%" y="133" width="0.0135%" height="15" fill="rgb(233,36,39)" fg:x="313810" fg:w="51"/><text x="83.2325%" y="143.50"></text></g><g><title>cli`_rjem_je_malloc_default (64 samples, 0.02%)</title><rect x="82.9801%" y="149" width="0.0169%" height="15" fill="rgb(226,3,54)" fg:x="313801" fg:w="64"/><text x="83.2301%" y="159.50"></text></g><g><title>cli`core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;czsc::bsp::CBspPoint&lt;czsc::cseg::CSeg&lt;czsc::cbi::CBi&gt;&gt;&gt;&gt; (54 samples, 0.01%)</title><rect x="83.0095%" y="149" width="0.0143%" height="15" fill="rgb(245,192,40)" fg:x="313912" fg:w="54"/><text x="83.2595%" y="159.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (13,982 samples, 3.70%)</title><rect x="83.0256%" y="149" width="3.6973%" height="15" fill="rgb(238,167,29)" fg:x="313973" fg:w="13982"/><text x="83.2756%" y="159.50">cli`..</text></g><g><title>cli`czsc::bsp_list::CBSPointList&lt;T&gt;::add_bs (43,044 samples, 11.38%)</title><rect x="75.3419%" y="165" width="11.3824%" height="15" fill="rgb(232,182,51)" fg:x="284916" fg:w="43044"/><text x="75.5919%" y="175.50">cli`czsc::bsp_lis..</text></g><g><title>cli`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10,796 samples, 2.85%)</title><rect x="91.0935%" y="149" width="2.8548%" height="15" fill="rgb(231,60,39)" fg:x="344483" fg:w="10796"/><text x="91.3435%" y="159.50">cl..</text></g><g><title>cli`core::hash::BuildHasher::hash_one (7,420 samples, 1.96%)</title><rect x="93.9497%" y="149" width="1.9621%" height="15" fill="rgb(208,69,12)" fg:x="355284" fg:w="7420"/><text x="94.1997%" y="159.50">c..</text></g><g><title>cli`extent_recycle (44 samples, 0.01%)</title><rect x="95.9211%" y="37" width="0.0116%" height="15" fill="rgb(235,93,37)" fg:x="362739" fg:w="44"/><text x="96.1711%" y="47.50"></text></g><g><title>cli`_rjem_je_arena_extent_alloc_large (51 samples, 0.01%)</title><rect x="95.9195%" y="101" width="0.0135%" height="15" fill="rgb(213,116,39)" fg:x="362733" fg:w="51"/><text x="96.1695%" y="111.50"></text></g><g><title>cli`_rjem_je_pa_alloc (48 samples, 0.01%)</title><rect x="95.9203%" y="85" width="0.0127%" height="15" fill="rgb(222,207,29)" fg:x="362736" fg:w="48"/><text x="96.1703%" y="95.50"></text></g><g><title>cli`pac_alloc_impl (46 samples, 0.01%)</title><rect x="95.9208%" y="69" width="0.0122%" height="15" fill="rgb(206,96,30)" fg:x="362738" fg:w="46"/><text x="96.1708%" y="79.50"></text></g><g><title>cli`_rjem_je_ecache_alloc (46 samples, 0.01%)</title><rect x="95.9208%" y="53" width="0.0122%" height="15" fill="rgb(218,138,4)" fg:x="362738" fg:w="46"/><text x="96.1708%" y="63.50"></text></g><g><title>cli`_rjem_je_large_palloc (55 samples, 0.01%)</title><rect x="95.9192%" y="117" width="0.0145%" height="15" fill="rgb(250,191,14)" fg:x="362732" fg:w="55"/><text x="96.1692%" y="127.50"></text></g><g><title>cli`_rjem_je_arena_cache_bin_fill_small (43 samples, 0.01%)</title><rect x="95.9340%" y="101" width="0.0114%" height="15" fill="rgb(239,60,40)" fg:x="362788" fg:w="43"/><text x="96.1840%" y="111.50"></text></g><g><title>cli`_rjem_je_tcache_alloc_small_hard (44 samples, 0.01%)</title><rect x="95.9340%" y="117" width="0.0116%" height="15" fill="rgb(206,27,48)" fg:x="362788" fg:w="44"/><text x="96.1840%" y="127.50"></text></g><g><title>cli`_rjem_je_malloc_default (140 samples, 0.04%)</title><rect x="95.9129%" y="133" width="0.0370%" height="15" fill="rgb(225,35,8)" fg:x="362708" fg:w="140"/><text x="96.1629%" y="143.50"></text></g><g><title>cli`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (151 samples, 0.04%)</title><rect x="95.9118%" y="149" width="0.0399%" height="15" fill="rgb(250,213,24)" fg:x="362704" fg:w="151"/><text x="96.1618%" y="159.50"></text></g><g><title>cli`czsc::bsp_list::CBSPointList&lt;T&gt;::bsp1_idx_dict (34,980 samples, 9.25%)</title><rect x="86.7243%" y="165" width="9.2500%" height="15" fill="rgb(247,123,22)" fg:x="327960" fg:w="34980"/><text x="86.9743%" y="175.50">cli`czsc::bsp..</text></g><g><title>libsystem_platform.dylib`_platform_memset (85 samples, 0.02%)</title><rect x="95.9518%" y="149" width="0.0225%" height="15" fill="rgb(231,138,38)" fg:x="362855" fg:w="85"/><text x="96.2018%" y="159.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (9,048 samples, 2.39%)</title><rect x="95.9785%" y="165" width="2.3926%" height="15" fill="rgb(231,145,46)" fg:x="362956" fg:w="9048"/><text x="96.2285%" y="175.50">cl..</text></g><g><title>cli`czsc::ceigen_fx::CEigenFx&lt;T&gt;::add (159 samples, 0.04%)</title><rect x="98.3891%" y="149" width="0.0420%" height="15" fill="rgb(251,118,11)" fg:x="372072" fg:w="159"/><text x="98.6391%" y="159.50"></text></g><g><title>cli`czsc::ceigen::CEigen&lt;T&gt;::try_add (72 samples, 0.02%)</title><rect x="98.4121%" y="133" width="0.0190%" height="15" fill="rgb(217,147,25)" fg:x="372159" fg:w="72"/><text x="98.6621%" y="143.50"></text></g><g><title>cli`czsc::ceigen_fx::CEigenFx&lt;T&gt;::add (47 samples, 0.01%)</title><rect x="98.4369%" y="133" width="0.0124%" height="15" fill="rgb(247,81,37)" fg:x="372253" fg:w="47"/><text x="98.6869%" y="143.50"></text></g><g><title>cli`czsc::ceigen_fx::CEigenFx&lt;T&gt;::reset (98 samples, 0.03%)</title><rect x="98.4322%" y="149" width="0.0259%" height="15" fill="rgb(209,12,38)" fg:x="372235" fg:w="98"/><text x="98.6822%" y="159.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::cal_seg_sure (53 samples, 0.01%)</title><rect x="98.4628%" y="149" width="0.0140%" height="15" fill="rgb(227,1,9)" fg:x="372351" fg:w="53"/><text x="98.7128%" y="159.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::cal_seg_sure (372 samples, 0.10%)</title><rect x="98.3806%" y="165" width="0.0984%" height="15" fill="rgb(248,47,43)" fg:x="372040" fg:w="372"/><text x="98.6306%" y="175.50"></text></g><g><title>cli`do_rallocx (41 samples, 0.01%)</title><rect x="98.5017%" y="101" width="0.0108%" height="15" fill="rgb(221,10,30)" fg:x="372498" fg:w="41"/><text x="98.7517%" y="111.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::add_new_seg (84 samples, 0.02%)</title><rect x="98.4909%" y="149" width="0.0222%" height="15" fill="rgb(210,229,1)" fg:x="372457" fg:w="84"/><text x="98.7409%" y="159.50"></text></g><g><title>cli`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (50 samples, 0.01%)</title><rect x="98.4999%" y="133" width="0.0132%" height="15" fill="rgb(222,148,37)" fg:x="372491" fg:w="50"/><text x="98.7499%" y="143.50"></text></g><g><title>cli`alloc::raw_vec::finish_grow (47 samples, 0.01%)</title><rect x="98.5007%" y="117" width="0.0124%" height="15" fill="rgb(234,67,33)" fg:x="372494" fg:w="47"/><text x="98.7507%" y="127.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::collect_left_seg (138 samples, 0.04%)</title><rect x="98.4888%" y="165" width="0.0365%" height="15" fill="rgb(247,98,35)" fg:x="372449" fg:w="138"/><text x="98.7388%" y="175.50"></text></g><g><title>cli`_rjem_je_ecache_alloc (54 samples, 0.01%)</title><rect x="98.5649%" y="53" width="0.0143%" height="15" fill="rgb(247,138,52)" fg:x="372737" fg:w="54"/><text x="98.8149%" y="63.50"></text></g><g><title>cli`extent_recycle (45 samples, 0.01%)</title><rect x="98.5673%" y="37" width="0.0119%" height="15" fill="rgb(213,79,30)" fg:x="372746" fg:w="45"/><text x="98.8173%" y="47.50"></text></g><g><title>cli`_rjem_je_arena_cache_bin_fill_small (90 samples, 0.02%)</title><rect x="98.5559%" y="117" width="0.0238%" height="15" fill="rgb(246,177,23)" fg:x="372703" fg:w="90"/><text x="98.8059%" y="127.50"></text></g><g><title>cli`arena_slab_alloc (67 samples, 0.02%)</title><rect x="98.5620%" y="101" width="0.0177%" height="15" fill="rgb(230,62,27)" fg:x="372726" fg:w="67"/><text x="98.8120%" y="111.50"></text></g><g><title>cli`_rjem_je_pa_alloc (66 samples, 0.02%)</title><rect x="98.5623%" y="85" width="0.0175%" height="15" fill="rgb(216,154,8)" fg:x="372727" fg:w="66"/><text x="98.8123%" y="95.50"></text></g><g><title>cli`pac_alloc_impl (57 samples, 0.02%)</title><rect x="98.5646%" y="69" width="0.0151%" height="15" fill="rgb(244,35,45)" fg:x="372736" fg:w="57"/><text x="98.8146%" y="79.50"></text></g><g><title>cli`_rjem_je_tcache_alloc_small_hard (101 samples, 0.03%)</title><rect x="98.5546%" y="133" width="0.0267%" height="15" fill="rgb(251,115,12)" fg:x="372698" fg:w="101"/><text x="98.8046%" y="143.50"></text></g><g><title>cli`_rjem_je_malloc_default (131 samples, 0.03%)</title><rect x="98.5496%" y="149" width="0.0346%" height="15" fill="rgb(240,54,50)" fg:x="372679" fg:w="131"/><text x="98.7996%" y="159.50"></text></g><g><title>cli`czsc::czs::CZs&lt;T&gt;::update_zs_end (45 samples, 0.01%)</title><rect x="98.5935%" y="149" width="0.0119%" height="15" fill="rgb(233,84,52)" fg:x="372845" fg:w="45"/><text x="98.8435%" y="159.50"></text></g><g><title>cli`czsc::czs_list::CZsList&lt;T&gt;::add_to_free_lst (293 samples, 0.08%)</title><rect x="98.5340%" y="165" width="0.0775%" height="15" fill="rgb(207,117,47)" fg:x="372620" fg:w="293"/><text x="98.7840%" y="175.50"></text></g><g><title>cli`czsc::analyzer::Analyzer::cal_seg_and_zs (368,584 samples, 97.47%)</title><rect x="2.1430%" y="181" width="97.4667%" height="15" fill="rgb(249,43,39)" fg:x="8104" fg:w="368584"/><text x="2.3930%" y="191.50">cli`czsc::analyzer::Analyzer::cal_seg_and_zs</text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (3,732 samples, 0.99%)</title><rect x="98.6228%" y="165" width="0.9869%" height="15" fill="rgb(209,38,44)" fg:x="372956" fg:w="3732"/><text x="98.8728%" y="175.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (709 samples, 0.19%)</title><rect x="99.6126%" y="181" width="0.1875%" height="15" fill="rgb(236,212,23)" fg:x="376699" fg:w="709"/><text x="99.8626%" y="191.50"></text></g><g><title>cli`czsc::cbi_list::CBiList::try_add_virtual_bi (55 samples, 0.01%)</title><rect x="99.8022%" y="181" width="0.0145%" height="15" fill="rgb(242,79,21)" fg:x="377416" fg:w="55"/><text x="100.0522%" y="191.50"></text></g><g><title>cli`console::term::Term::write_through (48 samples, 0.01%)</title><rect x="99.8334%" y="133" width="0.0127%" height="15" fill="rgb(211,96,35)" fg:x="377534" fg:w="48"/><text x="100.0834%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (48 samples, 0.01%)</title><rect x="99.8334%" y="117" width="0.0127%" height="15" fill="rgb(253,215,40)" fg:x="377534" fg:w="48"/><text x="100.0834%" y="127.50"></text></g><g><title>cli`console::term::Term::flush (49 samples, 0.01%)</title><rect x="99.8334%" y="149" width="0.0130%" height="15" fill="rgb(211,81,21)" fg:x="377534" fg:w="49"/><text x="100.0834%" y="159.50"></text></g><g><title>cli`indicatif::draw_target::Drawable::draw (64 samples, 0.02%)</title><rect x="99.8318%" y="165" width="0.0169%" height="15" fill="rgb(208,190,38)" fg:x="377528" fg:w="64"/><text x="100.0818%" y="175.50"></text></g><g><title>libsystem_c.dylib`isatty (277 samples, 0.07%)</title><rect x="99.8532%" y="149" width="0.0732%" height="15" fill="rgb(235,213,38)" fg:x="377609" fg:w="277"/><text x="100.1032%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (277 samples, 0.07%)</title><rect x="99.8532%" y="133" width="0.0732%" height="15" fill="rgb(237,122,38)" fg:x="377609" fg:w="277"/><text x="100.1032%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (149 samples, 0.04%)</title><rect x="99.9265%" y="149" width="0.0394%" height="15" fill="rgb(244,218,35)" fg:x="377886" fg:w="149"/><text x="100.1765%" y="159.50"></text></g><g><title>cli`indicatif::draw_target::ProgressDrawTarget::width (437 samples, 0.12%)</title><rect x="99.8506%" y="165" width="0.1156%" height="15" fill="rgb(240,68,47)" fg:x="377599" fg:w="437"/><text x="100.1006%" y="175.50"></text></g><g><title>cli`indicatif::state::BarState::draw (551 samples, 0.15%)</title><rect x="99.8212%" y="181" width="0.1457%" height="15" fill="rgb(210,16,53)" fg:x="377488" fg:w="551"/><text x="100.0712%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (47 samples, 0.01%)</title><rect x="99.9675%" y="165" width="0.0124%" height="15" fill="rgb(235,124,12)" fg:x="378041" fg:w="47"/><text x="100.2175%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (43 samples, 0.01%)</title><rect x="99.9685%" y="149" width="0.0114%" height="15" fill="rgb(224,169,11)" fg:x="378045" fg:w="43"/><text x="100.2185%" y="159.50"></text></g><g><title>cli`std::sys::pal::unix::time::Timespec::now (50 samples, 0.01%)</title><rect x="99.9675%" y="181" width="0.0132%" height="15" fill="rgb(250,166,2)" fg:x="378041" fg:w="50"/><text x="100.2175%" y="191.50"></text></g><g><title>cli`cli::main::_{{closure}} (378,113 samples, 99.99%)</title><rect x="0.0013%" y="197" width="99.9865%" height="15" fill="rgb(242,216,29)" fg:x="5" fg:w="378113"/><text x="0.2513%" y="207.50">cli`cli::main::_{{closure}}</text></g><g><title>cli`main (378,155 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9976%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="378155"/><text x="0.2500%" y="255.50">cli`main</text></g><g><title>cli`std::sys::backtrace::__rust_begin_short_backtrace (378,155 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9976%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="378155"/><text x="0.2500%" y="239.50">cli`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>cli`cli::main (378,155 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9976%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="378155"/><text x="0.2500%" y="223.50">cli`cli::main</text></g><g><title>dyld`start (378,156 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9979%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="378156"/><text x="0.2500%" y="271.50">dyld`start</text></g><g><title>all (378,164 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="378164"/><text x="0.2500%" y="287.50"></text></g></svg></svg>