<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="379306"><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::line_type::LineType&gt;::get_end_klu (194 samples, 0.05%)</title><rect x="0.0477%" y="197" width="0.0511%" height="15" fill="rgb(227,0,7)" fg:x="181" fg:w="194"/><text x="0.2977%" y="207.50"></text></g><g><title>cli`_rjem_malloc (3,112 samples, 0.82%)</title><rect x="0.1139%" y="197" width="0.8204%" height="15" fill="rgb(217,0,24)" fg:x="432" fg:w="3112"/><text x="0.3639%" y="207.50"></text></g><g><title>cli`_rjem_sdallocx (4,783 samples, 1.26%)</title><rect x="0.9343%" y="197" width="1.2610%" height="15" fill="rgb(221,193,54)" fg:x="3544" fg:w="4783"/><text x="1.1843%" y="207.50"></text></g><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::line_type::LineType&gt;::get_end_klu (3,343 samples, 0.88%)</title><rect x="53.8441%" y="181" width="0.8813%" height="15" fill="rgb(248,212,6)" fg:x="204234" fg:w="3343"/><text x="54.0941%" y="191.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (1,155 samples, 0.30%)</title><rect x="54.4210%" y="165" width="0.3045%" height="15" fill="rgb(208,68,35)" fg:x="206422" fg:w="1155"/><text x="54.6710%" y="175.50"></text></g><g><title>cli`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (44 samples, 0.01%)</title><rect x="54.7429%" y="165" width="0.0116%" height="15" fill="rgb(232,128,0)" fg:x="207643" fg:w="44"/><text x="54.9929%" y="175.50"></text></g><g><title>cli`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (118 samples, 0.03%)</title><rect x="54.7255%" y="181" width="0.0311%" height="15" fill="rgb(207,160,47)" fg:x="207577" fg:w="118"/><text x="54.9755%" y="191.50"></text></g><g><title>cli`DYLD-STUB$$pthread_getspecific (3,988 samples, 1.05%)</title><rect x="54.7566%" y="181" width="1.0514%" height="15" fill="rgb(228,23,34)" fg:x="207695" fg:w="3988"/><text x="55.0066%" y="191.50"></text></g><g><title>cli`_rjem_je_arena_cache_bin_fill_small (103 samples, 0.03%)</title><rect x="55.8536%" y="149" width="0.0272%" height="15" fill="rgb(218,30,26)" fg:x="211856" fg:w="103"/><text x="56.1036%" y="159.50"></text></g><g><title>cli`_rjem_je_tcache_alloc_small_hard (151 samples, 0.04%)</title><rect x="55.8420%" y="165" width="0.0398%" height="15" fill="rgb(220,122,19)" fg:x="211812" fg:w="151"/><text x="56.0920%" y="175.50"></text></g><g><title>cli`_rjem_je_tcache_bin_flush_small (143 samples, 0.04%)</title><rect x="56.0866%" y="133" width="0.0377%" height="15" fill="rgb(250,228,42)" fg:x="212740" fg:w="143"/><text x="56.3366%" y="143.50"></text></g><g><title>cli`_rjem_je_tcache_bin_flush_stashed (47 samples, 0.01%)</title><rect x="56.1243%" y="133" width="0.0124%" height="15" fill="rgb(240,193,28)" fg:x="212883" fg:w="47"/><text x="56.3743%" y="143.50"></text></g><g><title>cli`_rjem_je_te_event_trigger (988 samples, 0.26%)</title><rect x="55.8844%" y="165" width="0.2605%" height="15" fill="rgb(216,20,37)" fg:x="211973" fg:w="988"/><text x="56.1344%" y="175.50"></text></g><g><title>cli`tcache_event (310 samples, 0.08%)</title><rect x="56.0632%" y="149" width="0.0817%" height="15" fill="rgb(206,188,39)" fg:x="212651" fg:w="310"/><text x="56.3132%" y="159.50"></text></g><g><title>cli`_rjem_je_malloc_default (1,353 samples, 0.36%)</title><rect x="55.8080%" y="181" width="0.3567%" height="15" fill="rgb(217,207,13)" fg:x="211683" fg:w="1353"/><text x="56.0580%" y="191.50"></text></g><g><title>cli`tcache_event (75 samples, 0.02%)</title><rect x="56.1449%" y="165" width="0.0198%" height="15" fill="rgb(231,73,38)" fg:x="212961" fg:w="75"/><text x="56.3949%" y="175.50"></text></g><g><title>cli`_rjem_je_extent_record (51 samples, 0.01%)</title><rect x="56.2034%" y="133" width="0.0134%" height="15" fill="rgb(225,20,46)" fg:x="213183" fg:w="51"/><text x="56.4534%" y="143.50"></text></g><g><title>cli`_rjem_je_large_dalloc (62 samples, 0.02%)</title><rect x="56.2013%" y="165" width="0.0163%" height="15" fill="rgb(210,31,41)" fg:x="213175" fg:w="62"/><text x="56.4513%" y="175.50"></text></g><g><title>cli`pac_dalloc_impl (56 samples, 0.01%)</title><rect x="56.2029%" y="149" width="0.0148%" height="15" fill="rgb(221,200,47)" fg:x="213181" fg:w="56"/><text x="56.4529%" y="159.50"></text></g><g><title>cli`_rjem_je_tcache_bin_flush_stashed (39 samples, 0.01%)</title><rect x="56.3585%" y="149" width="0.0103%" height="15" fill="rgb(226,26,5)" fg:x="213771" fg:w="39"/><text x="56.6085%" y="159.50"></text></g><g><title>cli`_rjem_je_tcache_bin_flush_small (148 samples, 0.04%)</title><rect x="56.3948%" y="133" width="0.0390%" height="15" fill="rgb(249,33,26)" fg:x="213909" fg:w="148"/><text x="56.6448%" y="143.50"></text></g><g><title>cli`tcache_bin_flush_edatas_lookup (57 samples, 0.02%)</title><rect x="56.4188%" y="117" width="0.0150%" height="15" fill="rgb(235,183,28)" fg:x="214000" fg:w="57"/><text x="56.6688%" y="127.50"></text></g><g><title>cli`_rjem_je_tcache_bin_flush_stashed (61 samples, 0.02%)</title><rect x="56.4339%" y="133" width="0.0161%" height="15" fill="rgb(221,5,38)" fg:x="214057" fg:w="61"/><text x="56.6839%" y="143.50"></text></g><g><title>cli`_rjem_je_te_event_trigger (912 samples, 0.24%)</title><rect x="56.2208%" y="165" width="0.2404%" height="15" fill="rgb(247,18,42)" fg:x="213249" fg:w="912"/><text x="56.4708%" y="175.50"></text></g><g><title>cli`tcache_event (351 samples, 0.09%)</title><rect x="56.3687%" y="149" width="0.0925%" height="15" fill="rgb(241,131,45)" fg:x="213810" fg:w="351"/><text x="56.6187%" y="159.50"></text></g><g><title>cli`tcache_event (76 samples, 0.02%)</title><rect x="56.4615%" y="165" width="0.0200%" height="15" fill="rgb(249,31,29)" fg:x="214162" fg:w="76"/><text x="56.7115%" y="175.50"></text></g><g><title>cli`_rjem_je_sdallocx_default (1,170 samples, 0.31%)</title><rect x="56.1734%" y="181" width="0.3085%" height="15" fill="rgb(225,111,53)" fg:x="213069" fg:w="1170"/><text x="56.4234%" y="191.50"></text></g><g><title>cli`_rjem_malloc (26,938 samples, 7.10%)</title><rect x="56.4911%" y="181" width="7.1019%" height="15" fill="rgb(238,160,17)" fg:x="214274" fg:w="26938"/><text x="56.7411%" y="191.50">cli`_rjem_..</text></g><g><title>cli`_rjem_sdallocx (44,438 samples, 11.72%)</title><rect x="63.5930%" y="181" width="11.7156%" height="15" fill="rgb(214,148,48)" fg:x="241212" fg:w="44438"/><text x="63.8430%" y="191.50">cli`_rjem_sdallocx</text></g><g><title>cli`core::hash::BuildHasher::hash_one (312 samples, 0.08%)</title><rect x="75.3107%" y="181" width="0.0823%" height="15" fill="rgb(232,36,49)" fg:x="285658" fg:w="312"/><text x="75.5607%" y="191.50"></text></g><g><title>cli`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;isize,alloc::rc::Rc&lt;core::cell::RefCell&lt;czsc::bsp::CBspPoint&lt;czsc::cbi::CBi&gt;&gt;&gt;&gt;&gt; (4,106 samples, 1.08%)</title><rect x="75.3995%" y="181" width="1.0825%" height="15" fill="rgb(209,103,24)" fg:x="285995" fg:w="4106"/><text x="75.6495%" y="191.50"></text></g><g><title>cli`&lt;czsc::cseg::CSeg&lt;T&gt; as czsc::line_type::LineType&gt;::get_end_klu (7,617 samples, 2.01%)</title><rect x="82.0881%" y="165" width="2.0081%" height="15" fill="rgb(229,88,8)" fg:x="311365" fg:w="7617"/><text x="82.3381%" y="175.50">c..</text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (2,453 samples, 0.65%)</title><rect x="83.4495%" y="149" width="0.6467%" height="15" fill="rgb(213,181,19)" fg:x="316529" fg:w="2453"/><text x="83.6995%" y="159.50"></text></g><g><title>cli`_rjem_je_arena_cache_bin_fill_small (42 samples, 0.01%)</title><rect x="84.1004%" y="133" width="0.0111%" height="15" fill="rgb(254,191,54)" fg:x="318998" fg:w="42"/><text x="84.3504%" y="143.50"></text></g><g><title>cli`_rjem_je_malloc_default (58 samples, 0.02%)</title><rect x="84.0970%" y="165" width="0.0153%" height="15" fill="rgb(241,83,37)" fg:x="318985" fg:w="58"/><text x="84.3470%" y="175.50"></text></g><g><title>cli`_rjem_je_tcache_alloc_small_hard (51 samples, 0.01%)</title><rect x="84.0989%" y="149" width="0.0134%" height="15" fill="rgb(233,36,39)" fg:x="318992" fg:w="51"/><text x="84.3489%" y="159.50"></text></g><g><title>cli`core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;czsc::bsp::CBspPoint&lt;czsc::cseg::CSeg&lt;czsc::cbi::CBi&gt;&gt;&gt;&gt; (56 samples, 0.01%)</title><rect x="84.1257%" y="165" width="0.0148%" height="15" fill="rgb(226,3,54)" fg:x="319094" fg:w="56"/><text x="84.3757%" y="175.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (14,760 samples, 3.89%)</title><rect x="84.1426%" y="165" width="3.8913%" height="15" fill="rgb(245,192,40)" fg:x="319158" fg:w="14760"/><text x="84.3926%" y="175.50">cli`..</text></g><g><title>cli`czsc::bsp_list::CBSPointList&lt;T&gt;::add_bs (43,824 samples, 11.55%)</title><rect x="76.4820%" y="181" width="11.5537%" height="15" fill="rgb(238,167,29)" fg:x="290101" fg:w="43824"/><text x="76.7320%" y="191.50">cli`czsc::bsp_lis..</text></g><g><title>cli`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,761 samples, 2.31%)</title><rect x="91.8198%" y="165" width="2.3097%" height="15" fill="rgb(232,182,51)" fg:x="348278" fg:w="8761"/><text x="92.0698%" y="175.50">c..</text></g><g><title>cli`core::hash::BuildHasher::hash_one (7,380 samples, 1.95%)</title><rect x="94.1301%" y="165" width="1.9457%" height="15" fill="rgb(231,60,39)" fg:x="357041" fg:w="7380"/><text x="94.3801%" y="175.50">c..</text></g><g><title>cli`_rjem_je_ecache_alloc (38 samples, 0.01%)</title><rect x="96.0894%" y="69" width="0.0100%" height="15" fill="rgb(208,69,12)" fg:x="364473" fg:w="38"/><text x="96.3394%" y="79.50"></text></g><g><title>cli`_rjem_je_large_palloc (53 samples, 0.01%)</title><rect x="96.0857%" y="133" width="0.0140%" height="15" fill="rgb(235,93,37)" fg:x="364459" fg:w="53"/><text x="96.3357%" y="143.50"></text></g><g><title>cli`_rjem_je_arena_extent_alloc_large (47 samples, 0.01%)</title><rect x="96.0873%" y="117" width="0.0124%" height="15" fill="rgb(213,116,39)" fg:x="364465" fg:w="47"/><text x="96.3373%" y="127.50"></text></g><g><title>cli`_rjem_je_pa_alloc (43 samples, 0.01%)</title><rect x="96.0884%" y="101" width="0.0113%" height="15" fill="rgb(222,207,29)" fg:x="364469" fg:w="43"/><text x="96.3384%" y="111.50"></text></g><g><title>cli`pac_alloc_impl (40 samples, 0.01%)</title><rect x="96.0892%" y="85" width="0.0105%" height="15" fill="rgb(206,96,30)" fg:x="364472" fg:w="40"/><text x="96.3392%" y="95.50"></text></g><g><title>cli`_rjem_je_ecache_alloc (43 samples, 0.01%)</title><rect x="96.1055%" y="53" width="0.0113%" height="15" fill="rgb(218,138,4)" fg:x="364534" fg:w="43"/><text x="96.3555%" y="63.50"></text></g><g><title>cli`extent_recycle (38 samples, 0.01%)</title><rect x="96.1068%" y="37" width="0.0100%" height="15" fill="rgb(250,191,14)" fg:x="364539" fg:w="38"/><text x="96.3568%" y="47.50"></text></g><g><title>cli`_rjem_je_pa_alloc (47 samples, 0.01%)</title><rect x="96.1047%" y="85" width="0.0124%" height="15" fill="rgb(239,60,40)" fg:x="364531" fg:w="47"/><text x="96.3547%" y="95.50"></text></g><g><title>cli`pac_alloc_impl (44 samples, 0.01%)</title><rect x="96.1055%" y="69" width="0.0116%" height="15" fill="rgb(206,27,48)" fg:x="364534" fg:w="44"/><text x="96.3555%" y="79.50"></text></g><g><title>cli`_rjem_je_arena_cache_bin_fill_small (66 samples, 0.02%)</title><rect x="96.1002%" y="117" width="0.0174%" height="15" fill="rgb(225,35,8)" fg:x="364514" fg:w="66"/><text x="96.3502%" y="127.50"></text></g><g><title>cli`arena_slab_alloc (54 samples, 0.01%)</title><rect x="96.1034%" y="101" width="0.0142%" height="15" fill="rgb(250,213,24)" fg:x="364526" fg:w="54"/><text x="96.3534%" y="111.50"></text></g><g><title>cli`_rjem_je_tcache_alloc_small_hard (73 samples, 0.02%)</title><rect x="96.1002%" y="133" width="0.0192%" height="15" fill="rgb(247,123,22)" fg:x="364514" fg:w="73"/><text x="96.3502%" y="143.50"></text></g><g><title>cli`_rjem_je_malloc_default (176 samples, 0.05%)</title><rect x="96.0776%" y="149" width="0.0464%" height="15" fill="rgb(231,138,38)" fg:x="364428" fg:w="176"/><text x="96.3276%" y="159.50"></text></g><g><title>cli`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (189 samples, 0.05%)</title><rect x="96.0757%" y="165" width="0.0498%" height="15" fill="rgb(231,145,46)" fg:x="364421" fg:w="189"/><text x="96.3257%" y="175.50"></text></g><g><title>cli`czsc::bsp_list::CBSPointList&lt;T&gt;::bsp1_idx_dict (30,767 samples, 8.11%)</title><rect x="88.0358%" y="181" width="8.1114%" height="15" fill="rgb(251,118,11)" fg:x="333925" fg:w="30767"/><text x="88.2858%" y="191.50">cli`czsc::b..</text></g><g><title>libsystem_platform.dylib`_platform_memset (82 samples, 0.02%)</title><rect x="96.1256%" y="165" width="0.0216%" height="15" fill="rgb(217,147,25)" fg:x="364610" fg:w="82"/><text x="96.3756%" y="175.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (8,529 samples, 2.25%)</title><rect x="96.1495%" y="181" width="2.2486%" height="15" fill="rgb(247,81,37)" fg:x="364701" fg:w="8529"/><text x="96.3995%" y="191.50">c..</text></g><g><title>cli`czsc::ceigen_fx::CEigenFx&lt;T&gt;::add (179 samples, 0.05%)</title><rect x="98.4219%" y="165" width="0.0472%" height="15" fill="rgb(209,12,38)" fg:x="373320" fg:w="179"/><text x="98.6719%" y="175.50"></text></g><g><title>cli`czsc::ceigen::CEigen&lt;T&gt;::try_add (90 samples, 0.02%)</title><rect x="98.4453%" y="149" width="0.0237%" height="15" fill="rgb(227,1,9)" fg:x="373409" fg:w="90"/><text x="98.6953%" y="159.50"></text></g><g><title>cli`czsc::ceigen_fx::CEigenFx&lt;T&gt;::add (44 samples, 0.01%)</title><rect x="98.4727%" y="149" width="0.0116%" height="15" fill="rgb(248,47,43)" fg:x="373513" fg:w="44"/><text x="98.7227%" y="159.50"></text></g><g><title>cli`czsc::ceigen_fx::CEigenFx&lt;T&gt;::reset (94 samples, 0.02%)</title><rect x="98.4690%" y="165" width="0.0248%" height="15" fill="rgb(221,10,30)" fg:x="373499" fg:w="94"/><text x="98.7190%" y="175.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::cal_seg_sure (46 samples, 0.01%)</title><rect x="98.4988%" y="165" width="0.0121%" height="15" fill="rgb(210,229,1)" fg:x="373612" fg:w="46"/><text x="98.7488%" y="175.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::cal_seg_sure (380 samples, 0.10%)</title><rect x="98.4126%" y="181" width="0.1002%" height="15" fill="rgb(222,148,37)" fg:x="373285" fg:w="380"/><text x="98.6626%" y="191.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::collect_left_as_seg (40 samples, 0.01%)</title><rect x="98.5128%" y="181" width="0.0105%" height="15" fill="rgb(234,67,33)" fg:x="373665" fg:w="40"/><text x="98.7628%" y="191.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::add_new_seg (76 samples, 0.02%)</title><rect x="98.5255%" y="165" width="0.0200%" height="15" fill="rgb(247,98,35)" fg:x="373713" fg:w="76"/><text x="98.7755%" y="175.50"></text></g><g><title>cli`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (39 samples, 0.01%)</title><rect x="98.5352%" y="149" width="0.0103%" height="15" fill="rgb(247,138,52)" fg:x="373750" fg:w="39"/><text x="98.7852%" y="159.50"></text></g><g><title>cli`czsc::cseg_list::CSegListChan&lt;T&gt;::collect_left_seg (122 samples, 0.03%)</title><rect x="98.5234%" y="181" width="0.0322%" height="15" fill="rgb(213,79,30)" fg:x="373705" fg:w="122"/><text x="98.7734%" y="191.50"></text></g><g><title>cli`czsc::czs_list::CZsList&lt;T&gt;::add_to_free_lst (162 samples, 0.04%)</title><rect x="98.5647%" y="181" width="0.0427%" height="15" fill="rgb(246,177,23)" fg:x="373862" fg:w="162"/><text x="98.8147%" y="191.50"></text></g><g><title>cli`czsc::analyzer::Analyzer::cal_seg_and_zs (369,514 samples, 97.42%)</title><rect x="2.2151%" y="197" width="97.4184%" height="15" fill="rgb(230,62,27)" fg:x="8402" fg:w="369514"/><text x="2.4651%" y="207.50">cli`czsc::analyzer::Analyzer::cal_seg_and_zs</text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (3,851 samples, 1.02%)</title><rect x="98.6183%" y="181" width="1.0153%" height="15" fill="rgb(216,154,8)" fg:x="374065" fg:w="3851"/><text x="98.8683%" y="191.50"></text></g><g><title>cli`czsc::cbi::CBi::_get_end_klu (688 samples, 0.18%)</title><rect x="99.6378%" y="197" width="0.1814%" height="15" fill="rgb(244,35,45)" fg:x="377932" fg:w="688"/><text x="99.8878%" y="207.50"></text></g><g><title>cli`czsc::cbi_list::CBiList::try_add_virtual_bi (59 samples, 0.02%)</title><rect x="99.8231%" y="197" width="0.0156%" height="15" fill="rgb(251,115,12)" fg:x="378635" fg:w="59"/><text x="100.0731%" y="207.50"></text></g><g><title>cli`indicatif::draw_target::Drawable::draw (63 samples, 0.02%)</title><rect x="99.8526%" y="181" width="0.0166%" height="15" fill="rgb(240,54,50)" fg:x="378747" fg:w="63"/><text x="100.1026%" y="191.50"></text></g><g><title>libsystem_c.dylib`isatty (233 samples, 0.06%)</title><rect x="99.8716%" y="165" width="0.0614%" height="15" fill="rgb(233,84,52)" fg:x="378819" fg:w="233"/><text x="100.1216%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (233 samples, 0.06%)</title><rect x="99.8716%" y="149" width="0.0614%" height="15" fill="rgb(207,117,47)" fg:x="378819" fg:w="233"/><text x="100.1216%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (133 samples, 0.04%)</title><rect x="99.9330%" y="165" width="0.0351%" height="15" fill="rgb(249,43,39)" fg:x="379052" fg:w="133"/><text x="100.1830%" y="175.50"></text></g><g><title>cli`indicatif::draw_target::ProgressDrawTarget::width (370 samples, 0.10%)</title><rect x="99.8708%" y="181" width="0.0975%" height="15" fill="rgb(209,38,44)" fg:x="378816" fg:w="370"/><text x="100.1208%" y="191.50"></text></g><g><title>cli`indicatif::state::BarState::draw (480 samples, 0.13%)</title><rect x="99.8429%" y="197" width="0.1265%" height="15" fill="rgb(236,212,23)" fg:x="378710" fg:w="480"/><text x="100.0929%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (39 samples, 0.01%)</title><rect x="99.9707%" y="165" width="0.0103%" height="15" fill="rgb(242,79,21)" fg:x="379195" fg:w="39"/><text x="100.2207%" y="175.50"></text></g><g><title>cli`std::sys::pal::unix::time::Timespec::now (43 samples, 0.01%)</title><rect x="99.9699%" y="197" width="0.0113%" height="15" fill="rgb(211,96,35)" fg:x="379192" fg:w="43"/><text x="100.2199%" y="207.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (42 samples, 0.01%)</title><rect x="99.9702%" y="181" width="0.0111%" height="15" fill="rgb(253,215,40)" fg:x="379193" fg:w="42"/><text x="100.2202%" y="191.50"></text></g><g><title>cli`cli::main::_{{closure}} (379,254 samples, 99.99%)</title><rect x="0.0026%" y="213" width="99.9863%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="379254"/><text x="0.2526%" y="223.50">cli`cli::main::_{{closure}}</text></g><g><title>dyld`start (379,298 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9979%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="379298"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>cli`main (379,298 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9979%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="379298"/><text x="0.2500%" y="271.50">cli`main</text></g><g><title>cli`std::sys::backtrace::__rust_begin_short_backtrace (379,298 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9979%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="379298"/><text x="0.2500%" y="255.50">cli`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>cli`cli::main (379,298 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9979%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="379298"/><text x="0.2500%" y="239.50">cli`cli::main</text></g><g><title>all (379,306 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="379306"/><text x="0.2500%" y="303.50"></text></g></svg></svg>